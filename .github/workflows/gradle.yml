name: Java CI

on:
  pull_request:
    branches:
      - main
    paths:
      - '**.java'

  push: #Temporally use this until GitHub Repo is public
    branches:
      - main
    paths:
      - '**.java'

  workflow_dispatch: #Test workflow manually, comment this line when the repo is public

permissions:
  contents: write # for actions/checkout to fetch code and gradle to submit the dependency graph file
  security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

jobs:
  gradle-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/wrapper-validation@v4

      - name: Set up JDK 17 Temurin
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./.gradle/loom-cache/remapped-mods
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}

      - name: Setup Gradle # Generates and submits the dependency graph
        uses: gradle/actions/setup-gradle@v4
        with:
          dependency-graph: generate-and-submit
          artifact-retention-days: 2

      - name: Build with Gradle # Runs the build
        run: |
          ./gradlew build --stacktrace | tee build.log
        continue-on-error: true

      - name: Extract Failure Logs
        if: failure()
        run: |
          echo "Build failed. Extracting failure logs..."
          tail -n 50 build.log > failure.log
          echo "::set-output name=failure_logs::$(cat failure.log)"

      - name: Comment on PR with Failure Logs
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const failureLogs = fs.readFileSync('failure.log', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `ðŸš¨ **Gradle Build Failed** ðŸš¨\n\n**Error Logs:**\n\`\`\`\n${failureLogs}\n\`\`\`\`
              `
            });

      - name: PMD report # Runs PMD and uploads the results
        if: success()
        uses: pmd/pmd-github-action@v2
        with:
          sourcePath: 'src/main/java/com/yuseix/dragonminez'
          rulesets: '.github/workflows/pmd/quickstart.xml'
          analyzeModifiedFilesOnly: true

        #############################
        #        Quitar comentarios cuando el repositorio sea pÃºblico y hacer setup de GitHub Advanced Security
        #############################

#      - name: PMD Violations Check # Fails the build if there are PMD violations
#        if: success()
#        if: ${{steps.pmd_scan.outputs.violations}} != 0
#        run: exit 1

#      - name: Upload SARIF file
#        uses: github/codeql-action/upload-sarif@v3
#        with:
#          sarif_file: pmd-report.sarif
